import sys
import os
import argparse
from pathlib import Path
from ci_parser import parse_junit_xml, parse_benchmark_json
from generators.compatibility import generate_compatibility_table
from generators.system_info import generate_benchmark_system_info_table
from generators.benchmark_table import generate_benchmark_table
from example_processor import insert_examples

# –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
script_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.abspath(os.path.join(script_dir, '..', '..'))

if project_root not in sys.path:
    sys.path.insert(0, project_root)


def parse_arguments():
    parser = argparse.ArgumentParser(description="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è README.md –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ CI.")
    parser.add_argument("--input-folder", required=True, help="–ü—É—Ç—å –∫ –∫–∞—Ç–∞–ª–æ–≥—É –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤.")
    parser.add_argument("--output-readme", default="README.md", help="–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è README.")
    parser.add_argument("--template-path", default="README.md.template", help="–ü—É—Ç—å –∫ —à–∞–±–ª–æ–Ω—É.")
    return parser.parse_args()


def check_input_paths(input_base_path: Path, template_path: Path) -> Path | None:
    if not input_base_path.exists():
        print(f"[ERROR] –ö–∞—Ç–∞–ª–æ–≥ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ '{input_base_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None

    if template_path.is_dir():
        template_path = template_path / "README.md.template"

    return template_path


def process_artifacts(input_base_path: Path, expected_combinations: list[str]):
    print("[INFO] –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤... ", end="", flush=True)
    results = {}

    for combo in expected_combinations:
        print(f"\n  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {combo} ... ", end="", flush=True)
        combo_path = input_base_path / combo
        test_xml = combo_path / ".project" / "rtest-junit.xml"
        bench_json = combo_path / ".project" / "rbenchmark.json"

        test_results = {"total": 0, "failures": 0, "errors": 0, "skipped": 0, "passed": False}
        benchmark_data = {"benchmarks": [], "system_info": {}}

        if combo_path.is_dir():
            if test_xml.is_file():
                print("–ø–∞—Ä—Å—é —Ç–µ—Å—Ç—ã... ", end="", flush=True)
                test_results = parse_junit_xml(test_xml)
                print("ok", end=", ", flush=True)
            else:
                print("—Ç–µ—Å—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", end=", ", flush=True)

            if bench_json.is_file():
                print("–ø–∞—Ä—Å—é –±–µ–Ω—á–º–∞—Ä–∫–∏... ", end="", flush=True)
                benchmark_data = parse_benchmark_json(bench_json)
                print("ok", end="", flush=True)
            else:
                print("–±–µ–Ω—á–º–∞—Ä–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", end="", flush=True)
        else:
            print("–∫–∞—Ç–∞–ª–æ–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", end="", flush=True)

        results[combo] = {
            "test_results": test_results,
            "benchmark_results": benchmark_data.get("benchmarks", []),
            "system_info": benchmark_data.get("system_info", {})
        }

    print("\n[INFO] –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à—ë–Ω. ok")
    return results


def should_abort_due_to_failed_ci(results: dict) -> bool:
    for combo, data in results.items():
        if data["test_results"]["total"] == 0:
            print(f"[ERROR] CI –¥–ª—è '{combo}' –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª —Ç–µ—Å—Ç—ã. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ README.")
            return True
    return False


def generate_sections(results: dict):
    print("[INFO] –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–∞–±–ª–∏—Ü—É —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏... ", end="", flush=True)
    compatibility = generate_compatibility_table(results)
    print("ok")

    print("[INFO] –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ... ", end="", flush=True)
    system_info_dict = {k: v["system_info"] for k, v in results.items() if v["system_info"]}
    if system_info_dict:
        system_info = generate_benchmark_system_info_table(system_info_dict)
        print("ok")
    else:
        system_info = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ –¥–ª—è –±–µ–Ω—á–º–∞—Ä–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
        print("–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    print("[INFO] –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –±–µ–Ω—á–º–∞—Ä–∫–æ–≤... ", end="", flush=True)
    benchmark_table = generate_benchmark_table(results)
    print("ok")

    return compatibility, system_info, benchmark_table


def build_readme(template_path: Path, output_path: Path, compatibility_md: str, system_info_md: str, benchmark_md: str):
    try:
        print(f"[INFO] –ß–∏—Ç–∞—é —à–∞–±–ª–æ–Ω –∏–∑ {template_path} ... ", end="", flush=True)
        with open(template_path, 'r', encoding='utf-8') as f:
            template = f.read()
        print("ok")

        print("[INFO] –ó–∞–º–µ–Ω—è—é –º–∞–∫—Ä–æ—Å—ã... ", end="", flush=True)
        readme = template.replace("{{COMPATIBILITY_TABLE}}", compatibility_md)
        readme = readme.replace("{{SYSTEM_INFO}}", system_info_md)
        readme = readme.replace("{{BENCHMARK_TABLE}}", benchmark_md)
        print("ok")

        examples_path = Path(project_root) / "tests" / "examples"
        print(f"[INFO] –í—Å—Ç–∞–≤–ª—è—é –ø—Ä–∏–º–µ—Ä—ã –∏–∑ {examples_path} ... ", end="", flush=True)
        readme = insert_examples(readme, examples_path)
        print("ok")

        print(f"[INFO] –ó–∞–ø–∏—Å—ã–≤–∞—é README –≤ {output_path} ... ", end="", flush=True)
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(readme)
        print("ok")

        print(f"\n[–£–°–ü–ï–•] README.md —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ –ø—É—Ç–∏: {output_path.resolve()}")

    except Exception as e:
        print(f"\n[–û–®–ò–ë–ö–ê] {type(e).__name__}: {e}")


def main():
    print("=" * 50)
    print("üõ†Ô∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è README.md –∑–∞–ø—É—â–µ–Ω–∞")
    print("=" * 50)

    args = parse_arguments()
    input_base = Path(args.input_folder)
    output_readme = Path(args.output_readme)
    template_path = check_input_paths(input_base, Path(args.template_path))
    if not template_path:
        return

    expected_combinations = ["ubuntu-latest-gcc", "ubuntu-latest-clang", "windows-latest-msvc"]
    results = process_artifacts(input_base, expected_combinations)

    if should_abort_due_to_failed_ci(results):
        print("[WARNING] –ù–µ–∫–æ—Ç–æ—Ä—ã–µ CI –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —Ç–µ—Å—Ç—ã, –Ω–æ README –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.")
        return

    compatibility, system_info, benchmark = generate_sections(results)
    build_readme(template_path, output_readme, compatibility, system_info, benchmark)


if __name__ == "__main__":
    main()
