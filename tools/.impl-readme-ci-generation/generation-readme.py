import sys
import os
import argparse
from pathlib import Path
from ci_parser import parse_junit_xml, parse_benchmark_json
from generators.compatibility import generate_compatibility_table
from generators.system_info import generate_benchmark_system_info_table
from generators.benchmark_table import generate_benchmark_table
from example_processor import insert_examples

# –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –ª–µ–∂–∏—Ç –≤ tools/.impl-readme-ci-generation/)
script_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.abspath(os.path.join(script_dir, '..', '..'))

if project_root not in sys.path:
    sys.path.insert(0, project_root)


def main():
    print("=" * 50)
    print("üõ†Ô∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è README.md –∑–∞–ø—É—â–µ–Ω–∞")
    print("=" * 50)

    parser = argparse.ArgumentParser(description="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è README.md –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ CI.")
    parser.add_argument("--input-folder", required=True, help="–ü—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É –∫–∞—Ç–∞–ª–æ–≥—É –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'downloaded_artifacts').")
    parser.add_argument("--output-readme", default="README.md", help="–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ README.md.")
    parser.add_argument("--template-path", default="README.md.template", help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —à–∞–±–ª–æ–Ω–∞ README.md.")
    args = parser.parse_args()

    input_base_path = Path(args.input_folder)
    output_readme_path = Path(args.output_readme)
    template_path = Path(args.template_path)

    if not input_base_path.exists():
        print(f"[ERROR] –ö–∞—Ç–∞–ª–æ–≥ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ '{input_base_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    print("[INFO] –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤... ", end="", flush=True)
    all_results = {}

    expected_combinations = [
        "ubuntu-latest-gcc",
        "ubuntu-latest-clang",
        "windows-latest-msvc"
    ]

    for combo_dir_name in expected_combinations:
        print(f"\n  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {combo_dir_name} ... ", end="", flush=True)
        combo_path = input_base_path / combo_dir_name

        test_xml_path = combo_path / "rtest-junit.xml"
        benchmark_json_path = combo_path / "rbenchmark.json"

        test_results = {"total": 0, "failures": 0, "errors": 0, "skipped": 0, "passed": False}
        benchmark_data = {"benchmarks": [], "system_info": {}}

        if combo_path.is_dir():
            if test_xml_path.is_file():
                print(f"–ø–∞—Ä—Å—é —Ç–µ—Å—Ç—ã... ", end="", flush=True)
                test_results = parse_junit_xml(test_xml_path)
                print("ok", end="", flush=True)
            else:
                print(f"—Ç–µ—Å—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", end="", flush=True)

            print(", ", end="", flush=True)

            if benchmark_json_path.is_file():
                print(f"–ø–∞—Ä—Å—é –±–µ–Ω—á–º–∞—Ä–∫–∏... ", end="", flush=True)
                benchmark_data = parse_benchmark_json(benchmark_json_path)
                print("ok", end="", flush=True)
            else:
                print(f"–±–µ–Ω—á–º–∞—Ä–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", end="", flush=True)
        else:
            print(f"–∫–∞—Ç–∞–ª–æ–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", end="", flush=True)

        all_results[combo_dir_name] = {
            "test_results": test_results,
            "benchmark_results": benchmark_data.get("benchmarks", []),
            "system_info": benchmark_data.get("system_info", {})
        }
    print("\n[INFO] –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à—ë–Ω. ok")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ö–æ—Ç—è –±—ã –≤ –æ–¥–Ω–æ–º –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ—Å—Ç–∞—Ö –∏–ª–∏ –±–µ–Ω—á–º–∞—Ä–∫–∞—Ö
    has_valid_data = any(
        (res["test_results"]["total"] > 0 or len(res["benchmark_results"]) > 0)
        for res in all_results.values()
    )
    if not has_valid_data:
        print("[WARN] –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤. README.md –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å –∑–∞–≥–ª—É—à–∫–∞–º–∏.")

    print("[INFO] –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–∞–±–ª–∏—Ü—É —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏... ", end="", flush=True)
    compatibility_table_md = generate_compatibility_table(all_results)
    print("ok")

    print("[INFO] –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ –¥–ª—è –±–µ–Ω—á–º–∞—Ä–∫–æ–≤... ", end="", flush=True)
    system_info_dict = {
        key: val["system_info"]
        for key, val in all_results.items()
        if val.get("system_info")
    }
    if system_info_dict:
        system_info_md = generate_benchmark_system_info_table(system_info_dict)
        print("ok")
    else:
        system_info_md = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ –¥–ª—è –±–µ–Ω—á–º–∞—Ä–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
        print("–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    print("[INFO] –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –±–µ–Ω—á–º–∞—Ä–∫–æ–≤... ", end="", flush=True)
    benchmark_table_md = generate_benchmark_table(all_results)
    print("ok")

    try:
        print(f"[INFO] –ß–∏—Ç–∞—é —à–∞–±–ª–æ–Ω README –∏–∑ {template_path} ... ", end="", flush=True)
        with open(template_path, 'r', encoding='utf-8') as f:
            readme_template = f.read()
        print("ok")

        print("[INFO] –ó–∞–º–µ–Ω—è—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–∞–∫—Ä–æ—Å—ã –≤ —à–∞–±–ª–æ–Ω–µ... ", end="", flush=True)
        readme_content = readme_template.replace("{{COMPATIBILITY_TABLE}}", compatibility_table_md)
        readme_content = readme_content.replace("{{SYSTEM_INFO}}", system_info_md)
        readme_content = readme_content.replace("{{BENCHMARK_TABLE}}", benchmark_table_md)
        print("ok")

        # –ü—É—Ç—å –∫ –ø—Ä–∏–º–µ—Ä–∞–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º
        examples_dir = Path(project_root) / "tests" / "examples"
        print(f"[INFO] –í—Å—Ç–∞–≤–ª—è—é –ø—Ä–∏–º–µ—Ä—ã –∏–∑ {examples_dir} ... ", end="", flush=True)
        readme_content = insert_examples(readme_content, examples_dir)
        print("ok")

        print(f"[INFO] –ó–∞–ø–∏—Å—ã–≤–∞—é –∏—Ç–æ–≥–æ–≤—ã–π README –≤ {output_readme_path} ... ", end="", flush=True)
        with open(output_readme_path, 'w', encoding='utf-8') as f:
            f.write(readme_content)
        print("ok")

        print("\n[–£–°–ü–ï–•] README.md —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:")
        print(f" ‚Üí {output_readme_path.resolve()}")

    except FileNotFoundError:
        print(f"\n[ERROR] –§–∞–π–ª —à–∞–±–ª–æ–Ω–∞ README.md.template –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {template_path}")
    except Exception as e:
        print("\n[–û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å README.md")
        print(f"[–ò–°–ö–õ–Æ–ß–ï–ù–ò–ï] {type(e).__name__}: {e}")


if __name__ == "__main__":
    main()
