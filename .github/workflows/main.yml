name: CI Pipeline

on:
  push:
    branches:
      - main
    paths-ignore:
      - README.md
  pull_request:

env:
  DGENERATE_TESTS: "ON"
  DGENERATE_BENCHMARK: "ON"
  PROJECT_DIR: .project
  CHARTS_DIR: docs/charts
  BENCHMARK_JSON: .project/rbenchmark.json
  JUNIT_XML: .project/rtest-junit.xml

jobs:
  build-ubuntu-gcc:
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Python 3.x
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          cd tools/impl
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install GCC
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc

      - name: Configure CMake
        run: |
          mkdir -p $PROJECT_DIR
          cd $PROJECT_DIR
          cmake -DGENERATE_TESTS=$DGENERATE_TESTS -DGENERATE_BENCHMARK=$DGENERATE_BENCHMARK ..

      - name: Build project
        run: |
          cd $PROJECT_DIR
          cmake --build . --config Release

      - name: Run tests
        run: |
          cd $PROJECT_DIR
          ctest -C Release --output-on-failure --output-junit $JUNIT_XML || true

      - name: Generate benchmark charts
        run: |
          cd tools/impl
          python plot-benchmarks.py --input ../../$BENCHMARK_JSON --output ../../$CHARTS_DIR || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-ubuntu-latest-gcc
          path: |
            ${{ env.JUNIT_XML }}
            ${{ env.BENCHMARK_JSON }}
            ${{ env.CHARTS_DIR }}/chart_*.png
        continue-on-error: true


  build-ubuntu-clang:
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          cd tools/impl
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Clang
        run: |
          sudo apt-get update
          sudo apt-get install -y clang

      - name: Configure CMake
        run: |
          mkdir -p $PROJECT_DIR
          cd $PROJECT_DIR
          cmake -DGENERATE_TESTS=$DGENERATE_TESTS -DGENERATE_BENCHMARK=$DGENERATE_BENCHMARK -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ ..

      - name: Build project
        run: |
          cd $PROJECT_DIR
          cmake --build . --config Release

      - name: Run tests
        run: |
          cd $PROJECT_DIR
          ctest -C Release --output-on-failure --output-junit $JUNIT_XML || true

      - name: Generate benchmark charts
        run: |
          cd tools/impl
          python plot-benchmarks.py --input ../../$BENCHMARK_JSON --output ../../$CHARTS_DIR || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-ubuntu-latest-clang
          path: |
            ${{ env.JUNIT_XML }}
            ${{ env.BENCHMARK_JSON }}
            ${{ env.CHARTS_DIR }}/chart_*.png
        continue-on-error: true

  build-windows-msvc:
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    runs-on: windows-latest
    continue-on-error: true
    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          cd tools/impl
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        shell: bash

      - name: Setup MSVC
        uses: microsoft/setup-msbuild@v2

      - name: Configure CMake
        run: |
          mkdir -p $Env:PROJECT_DIR
          cd $Env:PROJECT_DIR
          cmake -DGENERATE_TESTS=$Env:DGENERATE_TESTS -DGENERATE_BENCHMARK=$Env:DGENERATE_BENCHMARK ..
        shell: powershell

      - name: Build project
        run: |
          cd $Env:PROJECT_DIR
          cmake --build . --config Release
        shell: powershell

      - name: Run tests
        run: |
          cd $Env:PROJECT_DIR
          try {
            & ctest -C Release --output-on-failure --output-junit $Env:JUNIT_XML
          } catch {
            Write-Host "Tests failed, but continuing"
          }
        shell: powershell

      - name: Generate benchmark charts
        run: |
          cd tools/impl
          try {
            python plot-benchmarks.py --input ../../$Env:BENCHMARK_JSON --output ../../$Env:CHARTS_DIR
          } catch {
            Write-Host "Chart generation failed, but continuing"
          }
        shell: powershell

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-windows-latest-msvc
          path: |
            ${{ env.JUNIT_XML }}
            ${{ env.BENCHMARK_JSON }}
            ${{ env.CHARTS_DIR }}/chart_*.png
        continue-on-error: true


  update-readme:
    needs: [build-ubuntu-gcc, build-ubuntu-clang, build-windows-msvc]
    runs-on: ubuntu-latest
    if: ${{ github.actor == github.repository_owner && github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, '[skip ci]') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Download artifact ubuntu-latest gcc
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-ubuntu-latest-gcc
          path: downloaded_artifacts/ubuntu-latest-gcc
        continue-on-error: true

      - name: Download artifact ubuntu-latest clang
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-ubuntu-latest-clang
          path: downloaded_artifacts/ubuntu-latest-clang
        continue-on-error: true

      - name: Download artifact windows-latest msvc
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-windows-latest-msvc
          path: downloaded_artifacts/windows-latest-msvc
        continue-on-error: true
      
      - name: Publish test reports (GCC)
        if: ${{ always() }}
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: downloaded_artifacts/ubuntu-latest-gcc/.project/rtest-junit.xml
        continue-on-error: true

      - name: Publish test reports (Clang)
        if: ${{ always() }}
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: downloaded_artifacts/ubuntu-latest-clang/.project/rtest-junit.xml
        continue-on-error: true

      - name: Publish test reports (MSVC)
        if: ${{ always() }}
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: downloaded_artifacts/windows-latest-msvc/.project/rtest-junit.xml
        continue-on-error: true

      - name: Generate README
        working-directory: tools/.impl-readme-ci-generation
        run: python generation-readme.py --input-folder ../../downloaded_artifacts --output-readme ../../README.md --template-path .

      - name: Commit and push README if updated
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add README.md
          if git diff --cached --quiet; then
            echo "README.md not changed"
          else
            git commit -m "Update README with build status [skip ci]"
            git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:main
          fi
        shell: bash

        