name: CI Pipeline

on:
  push:
    branches:
      - main
    paths-ignore:
      - README.md
  pull_request:

jobs:
  build-ubuntu-gcc:
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    runs-on: ubuntu-latest
    continue-on-error: true
    env:
      DGENERATE_TESTS: "ON"
      DGENERATE_BENCHMARK: "ON"
    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Python 3.x
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          cd tools/impl
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install GCC
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc

      - name: Configure CMake
        run: |
          mkdir -p .project
          cd .project
          cmake -DGENERATE_TESTS=$DGENERATE_TESTS -DGENERATE_BENCHMARK=$DGENERATE_BENCHMARK ..

      - name: Build project
        run: |
          cd .project
          cmake --build . --config Release

      - name: Run tests
        run: |
          cd .project
          ctest -C Release --output-on-failure --output-junit rtest-junit.xml || true

      - name: Generate benchmark charts
        run: |
          cd tools/impl
          python plot-benchmarks.py --input ../../.project/rbenchmark.json --output ../../docs/charts || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-ubuntu-latest-gcc
          path: |
            .project/rtest-junit.xml
            .project/rbenchmark.json
            docs/charts/chart_*.png
        continue-on-error: true

  build-ubuntu-clang:
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    runs-on: ubuntu-latest
    continue-on-error: true
    env:
      DGENERATE_TESTS: "ON"
      DGENERATE_BENCHMARK: "ON"
    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          cd tools/impl
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Clang
        run: |
          sudo apt-get update
          sudo apt-get install -y clang

      - name: Configure CMake
        run: |
          mkdir -p .project
          cd .project
          cmake -DGENERATE_TESTS=$DGENERATE_TESTS -DGENERATE_BENCHMARK=$DGENERATE_BENCHMARK -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ ..

      - name: Build project
        run: |
          cd .project
          cmake --build . --config Release

      - name: Run tests
        run: |
          cd .project
          ctest -C Release --output-on-failure --output-junit rtest-junit.xml || true

      - name: Generate benchmark charts
        run: |
          cd tools/impl
          python plot-benchmarks.py --input ../../.project/rbenchmark.json --output ../../docs/charts || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-ubuntu-latest-clang
          path: |
            .project/rtest-junit.xml
            .project/rbenchmark.json
            docs/charts/chart_*.png
        continue-on-error: true

  build-windows-msvc:
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    runs-on: windows-latest
    continue-on-error: true
    env:
      DGENERATE_TESTS: "ON"
      DGENERATE_BENCHMARK: "ON"
    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          cd tools/impl
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        shell: bash

      - name: Setup MSVC
        uses: microsoft/setup-msbuild@v2

      - name: Configure CMake
        run: |
          mkdir -p .project
          cd .project
          cmake -DGENERATE_TESTS=$Env:DGENERATE_TESTS -DGENERATE_BENCHMARK=$Env:DGENERATE_BENCHMARK ..
        shell: powershell

      - name: Build project
        run: |
          cd .project
          cmake --build . --config Release
        shell: powershell

      - name: Run tests
        run: |
            cd .project
            try {
              & ctest -C Release --output-on-failure --output-junit rtest-junit.xml
            } catch {
              Write-Host "Tests failed, but continuing"
            }
        shell: powershell

      - name: Generate benchmark charts
        run: |
          cd tools/impl
          try {
            python plot-benchmarks.py --input ../../.project/rbenchmark.json --output ../../docs/charts
          } catch {
            Write-Host "Chart generation failed, but continuing"
          }
        shell: powershell

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-windows-latest-msvc
          path: |
            .project/rtest-junit.xml
            .project/rbenchmark.json
            docs/charts/chart_*.png
        continue-on-error: true

  update-readme:
    needs: [build-ubuntu-gcc, build-ubuntu-clang, build-windows-msvc]
    runs-on: ubuntu-latest
    if: ${{ github.actor == github.repository_owner && github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, '[skip ci]') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Download artifact ubuntu-latest gcc
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-ubuntu-latest-gcc
          path: downloaded_artifacts/ubuntu-latest-gcc
        continue-on-error: true

      - name: Download artifact ubuntu-latest clang
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-ubuntu-latest-clang
          path: downloaded_artifacts/ubuntu-latest-clang
        continue-on-error: true

      - name: Download artifact windows-latest msvc
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-windows-latest-msvc
          path: downloaded_artifacts/windows-latest-msvc
        continue-on-error: true

      - name: Generate README
        working-directory: tools/.impl-readme-ci-generation
        run: python generation-readme.py --input-folder ../../downloaded_artifacts --output-readme ../../README.md --template-path .

      - name: Find existing junit files
        id: find-junit
        run: |
          paths=(
            downloaded_artifacts/ubuntu-latest-gcc/.project/rtest-junit.xml
            downloaded_artifacts/ubuntu-latest-clang/.project/rtest-junit.xml
            downloaded_artifacts/windows-latest-msvc/.project/rtest-junit.xml
          )

          existing_files=()
          for path in "${paths[@]}"; do
            if [ -f "$path" ]; then
              existing_files+=("$path")
            fi
          done

          if [ ${#existing_files[@]} -eq 0 ]; then
            echo "files=" >> $GITHUB_OUTPUT
          else
            echo "files=${existing_files[*]}" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Publish test reports
        if: steps.find-junit.outputs.files != ''
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: ${{ steps.find-junit.outputs.files }}
        continue-on-error: true

      - name: Commit and push README if updated
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add README.md
          if git diff --cached --quiet; then
            echo "README.md not changed"
          else
            git commit -m "Update README with build status [skip ci]"
            git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:main
          fi
        shell: bash

        